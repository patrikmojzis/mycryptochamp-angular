"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Collection = /** @class */ (function () {
    /**
     * @param sprites
     */
    function Collection(sprites, size, options) {
        if (options === void 0) { options = {}; }
        this.sprites = [];
        this.pickedSprites = {};
        this.sprites = sprites;
        var defaultOptions = {
            svg: {
                xmlns: 'http://www.w3.org/2000/svg',
                'xmlns:xlink': 'http://www.w3.org/1999/xlink',
                viewBox: [0, 0, size, size].join(' '),
                version: 1.1,
                'shape-rendering': 'crispEdges'
            }
        };
        // Typeescript does not offer a Polyfill for `Object.assign`, but for Object spread syntax.
        this.options = {};
        this.options.svg = __assign({}, defaultOptions.svg, (options.svg || {}));
    }
    /**
     * Returns sprite set
     *
     * @param random
     */
    Collection.prototype.get = function (random) {
        return (this.pickedSprites[random.seed] =
            this.pickedSprites[random.seed] || this.sprites.map(function (sprite) { return sprite.get(random); }));
    };
    return Collection;
}());
exports.default = Collection;
//# sourceMappingURL=collection.js.map