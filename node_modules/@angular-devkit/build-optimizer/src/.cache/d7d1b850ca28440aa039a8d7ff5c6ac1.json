{"remainingRequest":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\@dicebear\\avatars\\lib\\model\\sprite\\collection.js","dependencies":[{"path":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\@dicebear\\avatars\\lib\\model\\sprite\\collection.js","mtime":1523531890000},{"path":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522520767055},{"path":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nvar __assign = (this && this.__assign) || Object.assign || function (t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s)\r\n            if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Collection = /*@__PURE__*/ (function () {\r\n    /**\r\n     * @param sprites\r\n     */\r\n    function Collection(sprites, size, options) {\r\n        if (options === void 0) {\r\n            options = {};\r\n        }\r\n        this.sprites = [];\r\n        this.pickedSprites = {};\r\n        this.sprites = sprites;\r\n        var defaultOptions = {\r\n            svg: {\r\n                xmlns: 'http://www.w3.org/2000/svg',\r\n                'xmlns:xlink': 'http://www.w3.org/1999/xlink',\r\n                viewBox: [0, 0, size, size].join(' '),\r\n                version: 1.1,\r\n                'shape-rendering': 'crispEdges'\r\n            }\r\n        };\r\n        // Typeescript does not offer a Polyfill for `Object.assign`, but for Object spread syntax.\r\n        this.options = {};\r\n        this.options.svg = __assign({}, defaultOptions.svg, (options.svg || {}));\r\n    }\r\n    /**\r\n     * Returns sprite set\r\n     *\r\n     * @param random\r\n     */\r\n    Collection.prototype.get = function (random) {\r\n        return (this.pickedSprites[random.seed] =\r\n            this.pickedSprites[random.seed] || this.sprites.map(function (sprite) { return sprite.get(random); }));\r\n    };\r\n    return Collection;\r\n}());\r\nexports.default = Collection;\r\n",null]}