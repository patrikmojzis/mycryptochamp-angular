{"remainingRequest":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\@dicebear\\avatars\\lib\\model\\color.js","dependencies":[{"path":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\@dicebear\\avatars\\lib\\model\\color.js","mtime":1523531890000},{"path":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522520767055},{"path":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar hexToRgb = require(\"pure-color/parse/hex\");\r\nvar rgbToHsv = require(\"pure-color/convert/rgb2hsv\");\r\nvar rgbToHex = require(\"pure-color/convert/rgb2hex\");\r\nvar hsvToRgb = require(\"pure-color/convert/hsv2rgb\");\r\nvar collection_1 = require(\"./color/collection\");\r\nvar Color = /*@__PURE__*/ (function () {\r\n    function Color(color) {\r\n        if (color === void 0) {\r\n            color = '#000';\r\n        }\r\n        this.alpha = 1;\r\n        if (color[0] == '#') {\r\n            this.hex = color;\r\n        }\r\n        else {\r\n            var match = /(.*)\\((.*)\\)/.exec(color);\r\n            if (match) {\r\n                var values = match[2].split(',').map(function (val) { return parseInt(val.trim()); });\r\n                switch (match[1].trim()) {\r\n                    case 'rgb':\r\n                        this.rgb = values;\r\n                        break;\r\n                    case 'rgba':\r\n                        this.rgba = values;\r\n                        break;\r\n                    case 'hsv':\r\n                        this.hsv = values;\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unsupported color format: ' + color);\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('Unknown color format: ' + color);\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperty(Color.prototype, \"rgb\", {\r\n        get: function () {\r\n            return (this.color.rgb = this.color.rgb || (this.color.hex ? this.hexToRgb(this.hex) : this.hsvToRgb(this.hsv)));\r\n        },\r\n        set: function (rgb) {\r\n            if (rgb.length != 3) {\r\n                throw new Error('An array with a length of 3 is expected.');\r\n            }\r\n            this.alpha = 1;\r\n            this.color = {\r\n                rgb: rgb\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"rgba\", {\r\n        get: function () {\r\n            return [this.rgb[0], this.rgb[1], this.rgb[2], this.alpha];\r\n        },\r\n        set: function (rgba) {\r\n            if (rgba.length != 4) {\r\n                throw new Error('An array with a length of 3 is expected.');\r\n            }\r\n            this.rgb = [rgba[0], rgba[1], rgba[2]];\r\n            this.alpha = rgba[3];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"hsv\", {\r\n        get: function () {\r\n            return (this.color.hsv = this.color.hsv || this.rgbToHsv(this.rgb));\r\n        },\r\n        set: function (hsv) {\r\n            if (hsv.length != 3) {\r\n                throw new Error('An array with a length of 3 is expected.');\r\n            }\r\n            this.alpha = 1;\r\n            this.color = {\r\n                hsv: hsv\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"hex\", {\r\n        get: function () {\r\n            return (this.color.hex = this.color.hex || this.rgbToHex(this.rgb));\r\n        },\r\n        set: function (hex) {\r\n            this.alpha = 1;\r\n            this.color = {\r\n                hex: hex\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Color.prototype.rgbToHex = function (rgb) {\r\n        return rgbToHex(rgb);\r\n    };\r\n    Color.prototype.hexToRgb = function (hex) {\r\n        return hexToRgb(hex).map(function (val) { return Math.round(val); });\r\n    };\r\n    Color.prototype.rgbToHsv = function (rgb) {\r\n        return rgbToHsv(rgb).map(function (val) { return Math.round(val); });\r\n    };\r\n    Color.prototype.hsvToRgb = function (hsv) {\r\n        return hsvToRgb(hsv).map(function (val) { return Math.round(val); });\r\n    };\r\n    Color.collection = collection_1.default;\r\n    return Color;\r\n}());\r\nexports.default = Color;\r\n",null]}