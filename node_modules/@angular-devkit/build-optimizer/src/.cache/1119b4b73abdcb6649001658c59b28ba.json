{"remainingRequest":"C:\\Projects\\Cryptochamps\\web-interface\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Projects\\Cryptochamps\\web-interface\\node_modules\\@dicebear\\avatars\\lib\\model\\sprite.js","dependencies":[{"path":"C:\\Projects\\Cryptochamps\\web-interface\\node_modules\\@dicebear\\avatars\\lib\\model\\sprite.js","mtime":1523531890000},{"path":"C:\\Projects\\Cryptochamps\\web-interface\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522520767055},{"path":"C:\\Projects\\Cryptochamps\\web-interface\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar color_1 = require(\"./color\");\r\nvar collection_1 = require(\"./sprite/collection\");\r\nvar Sprite = /*@__PURE__*/ (function () {\r\n    /**\r\n     * @param paths\r\n     * @param colorCollection\r\n     * @param chance\r\n     */\r\n    function Sprite(groups, colorCollection, chance) {\r\n        if (colorCollection === void 0) {\r\n            colorCollection = null;\r\n        }\r\n        if (chance === void 0) {\r\n            chance = 100;\r\n        }\r\n        this.groups = groups;\r\n        this.colorCollection = colorCollection;\r\n        this.chance = chance;\r\n    }\r\n    /**\r\n     * Creates an sprite\r\n     *\r\n     * @param random\r\n     */\r\n    Sprite.prototype.get = function (random) {\r\n        var _this = this;\r\n        var result = '';\r\n        if (random.bool(this.chance)) {\r\n            result = random.pickone(this.groups);\r\n            if (this.colorCollection) {\r\n                var color_2 = this.colorCollection.get(random);\r\n                result = result.replace(/(stroke|fill)=[\"'](.*?)[\"']/gi, function (match, name, value) {\r\n                    return name + '=\"' + _this.calculateColor(value, color_2) + '\"';\r\n                });\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Calculates the target color\r\n     *\r\n     * @param sourceColor\r\n     * @param targetColor\r\n     */\r\n    Sprite.prototype.calculateColor = function (sourceColor, targetColor) {\r\n        var sourceColorRgba = new color_1.default(sourceColor).rgba;\r\n        var targetColorRgba = targetColor.rgba;\r\n        sourceColorRgba[0] = Math.round((255 - targetColorRgba[0]) * (sourceColorRgba[0] / 255) + targetColorRgba[0]);\r\n        sourceColorRgba[1] = Math.round((255 - targetColorRgba[1]) * (sourceColorRgba[1] / 255) + targetColorRgba[1]);\r\n        sourceColorRgba[2] = Math.round((255 - targetColorRgba[2]) * (sourceColorRgba[2] / 255) + targetColorRgba[2]);\r\n        sourceColorRgba[3] = Math.round(sourceColorRgba[3] / 1 * targetColorRgba[3] * 100) / 100;\r\n        var newColor = 'rgba(' + sourceColorRgba.join(',') + ')';\r\n        return sourceColorRgba[3] != 1 ? newColor : new color_1.default(newColor).hex;\r\n    };\r\n    Sprite.collection = collection_1.default;\r\n    return Sprite;\r\n}());\r\nexports.default = Sprite;\r\n",null]}