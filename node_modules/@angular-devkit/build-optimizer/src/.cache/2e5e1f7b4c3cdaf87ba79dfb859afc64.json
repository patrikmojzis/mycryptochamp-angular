{"remainingRequest":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\web3\\lib\\solidity\\real.js","dependencies":[{"path":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\web3\\lib\\solidity\\real.js","mtime":1498211747000},{"path":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522520767055},{"path":"C:\\Projects\\MyCryptoChamp\\prod\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeReal is a prootype that represents real type\n * It matches:\n * real\n * real[]\n * real[4]\n * real[][]\n * real[3][]\n * real[][6][], ...\n * real32\n * real64[]\n * real8[4]\n * real256[][]\n * real[3][]\n * real64[][6][], ...\n */\nvar SolidityTypeReal = function () {\n    this._inputFormatter = f.formatInputReal;\n    this._outputFormatter = f.formatOutputReal;\n};\n\nSolidityTypeReal.prototype = new SolidityType({});\nSolidityTypeReal.prototype.constructor = SolidityTypeReal;\n\nSolidityTypeReal.prototype.isType = function (name) {\n    return !!name.match(/real([0-9]*)?(\\[([0-9]*)\\])?/);\n};\n\nmodule.exports = SolidityTypeReal;\n",null]}